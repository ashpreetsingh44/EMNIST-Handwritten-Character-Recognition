{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nmkW0FZzNbqp"
      },
      "outputs": [],
      "source": [
        "import kagglehub\n",
        "\n",
        "\n",
        "path = kagglehub.dataset_download(\"crawford/emnist\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "train_csv_path = '/root/.cache/kagglehub/datasets/crawford/emnist/versions/3/emnist-letters-train.csv'\n",
        "test_csv_path = '/root/.cache/kagglehub/datasets/crawford/emnist/versions/3/emnist-letters-test.csv'\n",
        "train_data = pd.read_csv(train_csv_path, header=None)\n",
        "test_data = pd.read_csv(test_csv_path, header=None)\n",
        "x_train = train_data.iloc[:, 1:].values\n",
        "y_train = train_data.iloc[:, 0].values\n",
        "x_test = test_data.iloc[:, 1:].values\n",
        "y_test = test_data.iloc[:, 0].values\n",
        "\n",
        "def rotate(image):\n",
        "    image = image.reshape([28, 28])\n",
        "    image = np.fliplr(image)\n",
        "    image = np.rot90(image)\n",
        "    return image\n",
        "    x_train = np.asarray(x_train)\n",
        "x_train = np.apply_along_axis(rotate, 1, x_train)\n",
        "print (\"x_train:\",x_train.shape)\n",
        "\n",
        "x_test = np.asarray(x_test)\n",
        "x_test = np.apply_along_axis(rotate, 1, x_test)\n",
        "print (\"x_test:\",x_test.shape)\n",
        "x_train = x_train.astype('float32')/255\n",
        "x_test = x_test.astype('float32')/255\n",
        "\n",
        "mapp = pd.DataFrame(data={'label': range(1, 27), 'character': [chr(ord('a') + i) for i in range(26)]})\n",
        "mapp.set_index('label', inplace=True)\n",
        "\n",
        "for i in range(100, 103):\n",
        "    plt.subplot(330 + (i - 99))\n",
        "    plt.imshow(x_train[i], cmap=plt.get_cmap('gray'))\n",
        "    label = y_train[i]\n",
        "    character = mapp.loc[label].values[0]\n",
        "    plt.title(character)\n",
        "\n",
        "plt.show()\n",
        "print(\"Size of the dataset:\", len(x_train) + len(x_test))\n",
        "print(\"Number of elements in the training set:\", len(x_train))\n",
        "print(\"Number of elements in the test set:\", len(x_test))\n",
        "#K-NN\n",
        "x_train = x_train.reshape(88800, 784)\n",
        "x_test = x_test.reshape(14800, 784)\n",
        "\n",
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "\n",
        "knn.fit(x_train, y_train)\n",
        "\n",
        "y_pred = knn.predict(x_test)\n",
        "\n",
        "accuracy = knn.score(x_test, y_test)\n",
        "print(f\"Test accuracy: {accuracy:.4f}\")\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()\n",
        "\n",
        "#SVM\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x_train = train_data.iloc[:, 1:].values\n",
        "y_train = train_data.iloc[:, 0].values\n",
        "x_test = test_data.iloc[:, 1:].values\n",
        "y_test = test_data.iloc[:, 0].values\n",
        "\n",
        "x_train = x_train.astype(\"float32\") / 255.0\n",
        "x_test = x_test.astype(\"float32\") / 255.0\n",
        "\n",
        "x_train = x_train.reshape(-1, 28 * 28)\n",
        "x_test = x_test.reshape(-1, 28 * 28)\n",
        "\n",
        "\n",
        "x_train_subset, _, y_train_subset, _ = train_test_split(x_train, y_train, train_size=10000, random_state=42, stratify=y_train)\n",
        "x_test_subset, _, y_test_subset, _ = train_test_split(x_test, y_test, train_size=2000, random_state=42, stratify=y_test)\n",
        "\n",
        "svm = SVC(kernel='linear', C=3.0, random_state=42)\n",
        "\n",
        "svm.fit(x_train_subset, y_train_subset)\n",
        "\n",
        "y_pred = svm.predict(x_test_subset)\n",
        "\n",
        "accuracy = accuracy_score(y_test_subset, y_pred)\n",
        "print(f\"Test accuracy: {accuracy:.4f}\")\n",
        "\n",
        "cm = confusion_matrix(y_test_subset, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()\n",
        "\n",
        "print(\"Size of the dataset:\", len(x_train) + len(x_test))\n",
        "print(\"Number of elements in the training set:\", len(x_train))\n",
        "print(\"Number of elements in the test set:\", len(x_test))\n",
        "#Logistic Regression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_train_flat = x_train.reshape(x_train.shape[0], -1)\n",
        "x_test_flat = x_test.reshape(x_test.shape[0], -1)\n",
        "\n",
        "logreg = LogisticRegression(max_iter=1100)\n",
        "logreg.fit(x_train_flat, y_train)\n",
        "\n",
        "y_pred_logreg = logreg.predict(x_test_flat)\n",
        "\n",
        "accuracy = logreg.score(x_test_flat, y_test)\n",
        "print(f\"Logistic Regression Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "cm_logreg = confusion_matrix(y_test, y_pred_logreg)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm_logreg, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix (Logistic Regression)\")\n",
        "plt.show()\n",
        "#Decision Tree\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "x_train = train_data.iloc[:, 1:].values\n",
        "y_train = train_data.iloc[:, 0].values\n",
        "x_test = test_data.iloc[:, 1:].values\n",
        "y_test = test_data.iloc[:, 0].values\n",
        "\n",
        "\n",
        "x_train = x_train.reshape(88800, 784)\n",
        "x_test = x_test.reshape(14800, 784)\n",
        "\n",
        "dt_classifier = DecisionTreeClassifier()\n",
        "\n",
        "dt_classifier.fit(x_train, y_train)\n",
        "\n",
        "y_pred = dt_classifier.predict(x_test)\n",
        "\n",
        "accuracy = dt_classifier.score(x_test, y_test)\n",
        "print(f\"Test accuracy: {accuracy:.4f}\")\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix for Decision Tree\")\n",
        "plt.show()\n",
        "#CNN\n",
        "x_train = train_data.iloc[:, 1:].values\n",
        "y_train = train_data.iloc[:, 0].values\n",
        "x_test = test_data.iloc[:, 1:].values\n",
        "y_test = test_data.iloc[:, 0].values\n",
        "\n",
        "x_train = x_train.astype(\"float32\") / 255.0\n",
        "x_test = x_test.astype(\"float32\") / 255.0\n",
        "x_train = x_train.reshape(-1, 28, 28, 1)\n",
        "x_test = x_test.reshape(-1, 28, 28, 1)\n",
        "\n",
        "y_train = y_train - 1\n",
        "y_test = y_test - 1\n",
        "\n",
        "model = keras.Sequential(\n",
        "    [\n",
        "        keras.Input(shape=(28, 28, 1)),\n",
        "        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n",
        "        layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n",
        "        layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "        layers.Flatten(),\n",
        "        layers.Dropout(0.5),\n",
        "\n",
        "        layers.Dense(26, activation=\"softmax\"),\n",
        "    ]\n",
        ")\n",
        "\n",
        "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n",
        "\n",
        "model.fit(x_train, y_train, batch_size=128, epochs=8, validation_split=0.1)\n",
        "\n",
        "loss, accuracy = model.evaluate(x_test, y_test, verbose=0)\n",
        "print(f\"Test loss: {loss:.4f}\")\n",
        "print(f\"Test accuracy: {accuracy:.4f}\")\n",
        "\n",
        "y_pred = np.argmax(model.predict(x_test), axis=1)\n",
        "\n",
        "\n",
        "cm = confusion_matrix(y_test + 1, y_pred + 1)\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()"
      ]
    }
  ]
}